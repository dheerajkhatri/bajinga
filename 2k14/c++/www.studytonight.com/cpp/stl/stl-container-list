<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Introduction to List Container in STL | C++ Tutorial | Studytonight</title>

<meta name="description" content="Learn about Lists in STL in C++ language and its member functions like insert, push_back, pop_back, push_front, sort etc in this tutorial.">

<!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
<!--[if lt IE 9]>
<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

<!-- Le styles -->
<link href="../../css/bootstrap.css" rel="stylesheet">
<link rel="icon" type="image/png" href="../../css/resource/favicon.png">


</head>
<body>

<style>

.dropdown:hover ul{
    display:block;
}
.dropdown ul { 
    display: none;  
    position:absolute;
    background: rgba(0, 0, 0, 0.80); 
    width: 150px;   
    list-style-type:none;
    padding:10px;
} 
.dropdown ul li{
    padding:4px;
}
.dropdown ul li a{ 
    line-height:30px;
    cursor:pointer;
    text-decoration:none;
    color:white;
} 
.dropdown ul li a:hover{
   color:orange;
} 
.dropdown ul.second
{
    left: 300px;
}

</style>

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1&appId=183470395085546";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
<div class="navbar navbar-inverse navbar-fixed-top">
<div class="navbar-inner">
<div class="nav-container">
<a class="brand" href="../../index.html" title="Take me Home :)"><img id="brand-icon" src="../../css/resource/st-icon.png" alt="studytonight logo"/></a>

<!-- <font color="orange">Study</font>tonight<sup><span id="beta">&#946;eta</span></sup> --> 

<ul class="nav navbar-nav nav-left-responsive">
<li><a href="http://studytonight.com/online-courses/">VIDEO PLAYLISTS</a></li>
<li class="dropdown"><a href="http://studytonight.com/library/">TUTORIALS</a>

	<ul class="first">
            <li><a href="../../android-app-using-mit-appinventor">ANDROID</a></li>
            <li><a href="../../maven">APACHE MAVEN</a></li>
            <li><a href="../../c">C LANGUAGE</a></li>
            <li><a href="../../cpp.1">C++</a></li>
            <li><a href="../../computer-networks">COMPUTER NETWORKS</a></li>
            <li><a href="../../java">CORE JAVA</a></li>
      </ul>
      <ul class="second">
      	    <li><a href="../../dbms">DBMS</a></li>
            <li><a href="../../data-structures">DATA STRUCTURE</a></li>
            <li><a href="../../jenkins">JENKINS</a></li>
            <li><a href="../../jsp">JSP</a></li>
            <li><a href="../../operating-system">OPERATING SYSTEM</a></li>
            <li><a href="../../servlet">SERVLET</a></li>
       </ul>

</li>
<li><a href="http://studytonight.com/studyroom/">Q &amp; A FORUM</a></li>
<li><a href="http://studytonight.com/tests/">TESTS</a></li>
<li><a href="http://studytonight.com/code/">HTML COURSE<sup id='beta'>NEW</sup></a></li>
</ul>


<ul class="nav nav-fb-responsive">
<li class="nav-header">
<div class="fb-like" data-href="http://facebook.com/studytonight" data-send="false" data-layout="button_count" data-width="100" data-show-faces="false"></div>
</li>
</ul>


<ul class="nav pull-right-menuoption nav-right-responsive">
<li>
<form class="navbar-search" action="http://www.studytonight.com/search.php" method="GET"> 
<table>
<tr>
<td><input type="text" name="q" maxlength="255" value="" class="search-query span2" placeholder="Search" title="Search Studytonight for Lessons and Topics"/></td>
</tr>
</table>
</form>
</li>
<li><a href="../../login">LogIn</a></li>
<li><a style="font-weight:bold;color:#f84906;" href="../../register">SignUp</a></li>
<li><a href="../../suggest">Suggest</a></li>
</ul>
</div>
</div>
</div>

<div style="float:right;margin-right:100px;">
<div class="bookmark-responsive">
<div class="bookmark-ribbon traditional font-calibri">
<a href="../../collaborate" target="_blank"><div id="bookmark-text">
<div>WRITE</div><div>FOR US &amp;</div><div>GET PAID!</div>
</div></a>
</div></div></div>

<!--  Event Bannner Space

<div class="container">
<div class="row">
<div class="span12"><a href="http://studytonight.com/event"><img src="http://studytonight.com/css/codetonight-banner.png" alt="Codetonight for Java Programmers" title="Click to Register for Codetonight"/></a></div>
</div></div> -->
<div class="row">

<div class="head-bar-cpp">
	<div class="container">
	<div id="subject-name">
		C++ TUTORIALS
	</div>
	</div>
<div id="subject-info">
<div class="container">
<div id="sm-button">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>

<!-- <a class="addthis_button_compact"></a> -->

</div>
<script type="text/javascript" src="http://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4fcb15e01d1a671c"></script>
</div>
<!-- AddThis Button END -->

</div>
<div>" C++ is a widely used language even Adobe Photoshop is developed in C++ programming language. "</div>

</div>

</div>
</div>
</div>
<!-- Common sub nav bar for all the lesson page, currently holding Google Adsense Code -->

<div class="center plain-text-ad-style" style="margin-bottom:10px;">
<div class="container">
<div class="row">
<div class="span12">
	<script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Sidebar Responsive Ad -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-6137246359299957"
     data-ad-slot="5741724623"
     data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>
</div>	
</div>
</div>

<div class="container">

<div class="row">

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script src="../../js/jquery.tipsy.js" type="text/javascript"></script>
<script type="text/javascript">
$(function() {
$('.sidebar-social-button').tipsy({gravity: 'e'});
$('#slide-toggle-sidebar').on('click', function(){
        $('#sidebar-menu').css('width','100%');
	$('#sidebar-menu').slideToggle();
	return false;
});
});
</script>
<link href="../../css/tipsy_title.css" rel="stylesheet">

<div class="span3">

<div class="sidebar-collpsed-responsive">
<a href="stl-container-list#" id="slide-toggle-sidebar"><span class="pull-right"><img src="../../css/resource/collapsed-menu.png" alt="Menu"/></span><span>SEE THE INDEX</span></a>
</div>

<div id="sidebar-menu">
<div class="sidebar-social-button" title="Share this Lesson with your friends">
<!-- AddThis Button BEGIN -->
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook_like" fb:like:layout="button_count"></a>
<a class="addthis_counter addthis_pill_style"></a>
</div>
<script type="text/javascript" src="http://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4fcb15e01d1a671c"></script>
<!-- AddThis Button END -->
</div>
<hr/>
<div><a href="../../cpp.1" class="btn btn-warning btn-lg">&larr; C++ Tutorial</a></div>
<br/>
<ul class="sidebar">
<li class="main"><b>STL Containers</b></li>
<li><a href="stl-introduction">Introduction to STL</a></li> 
<li><a href="stl-overview-of-containers">Overview of Containers in STL</a></li>
<li><a href="stl-pair-template">Pair Template</a></li>
<li><a href="stl-tuple-template">Tuple Template</a></li>
<li><a href="stl-container-array">Array</a></li>
<li><a href="stl-container-vector">Vector</a></li>
<li><a href="stl-container-list">List</a></li>
<li><a href="stl-container-map">Map</a></li>
<li><a href="stl-container-stack">Stack</a></li>
<li><a href="stl-container-queue">Queue</a></li>
<li><a href="stl-container-priority-queue">Priority Queue</a></li> 
<li><a href="stl-container-deque">Deque</a></li>

<li class="main"><b>Iterators</b></li>
<li><a href="stl-iterator-library">Introduction to Iterators</a></li>
<li><a href="stl-operations-on-iterators">Operations on Iterators</a></li>

<li class="main"><b>Algorithms in STL</b></li>
<li><a href="stl-overview-of-algorithms">Overview of Algorithms</a></li>  
<li><a href="stl-sorting-algorithms">Sorting Algorithms</a></li>
<li><a href="stl-searching">Binary Search and Equal Range</a></li>
<li><a href="stl-searching-lower-upper-bound">Upper Bound and Lower Bound</a></li>
<li><a href="stl-non-modifying-algorithms">Non Modifying Algorithms</a></li>
<li><a href="stl-modifying-algorithms">Modifying Algorithms</a></li>
<li><a href="stl-numeric-algorithms">Numeric Algorithms</a></li>
<li><a href="stl-min-max-operations">Minimum and Maximum operations</a></li>
<li><a href="stl-min-max-operations-cont">MinMax and Permutation operations</a></li>

</ul>

<br/>
<p style="margin-left:2px;">
<script id="mNCC" language="javascript">  medianet_width='200';  medianet_height= '200';  medianet_crid='187662268';  </script>  <script id="mNSC" src="http://contextual.media.net/nmedianet.js?cid=8CUK82SPR" language="javascript"></script>
</p>
</div>
</div>
<div class="span9">
<div id="body-content">

<h3>LIST</h3>
<p>Array and Vector are contiguous containers, i.e they store their data on continuous memory, thus the insert operation at the middle of vector/array is very costly (in terms of number of operaton and process time) because we have to shift all the elements, linked list overcome this problem. Linked list can be implemented by using the list container.
</p>
<p>Syntax for creating a new linked list using list template is :  
</p>
<pre>
#include &lt;iostream&gt;
#include &lt;list&gt;

int main()
{
   std::<b>list</b>&lt;int&gt; l;
}
<i>/* Creates a new empty linked list l */</i>
</pre>
<p>Similar to vector and array, lists can also be intialised with parameters,</p>
<pre>
#include &lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

int main()
{
   std::<b>list</b>&lt;int&gt; l{1,2,3};
}
<i>/* Creates a new linked list l */</i>
</pre>
<p class="center"><img src="images/introducing-list.png" alt="List creation example"></p>
<p>Here are some more ways by which we can initialize our list :</p>
<pre>
#include &lt;iostream&gt;
#include &lt;list&gt;
int main()
{
   <b>list</b>&lt;int&gt; myList{1,2,3};
   <i>/* creates list with 1,2,3 in it */</i>

   <b>list</b>&lt;int&gt; myNewList = 1;
   <i>/* create list myNewList of integer 
     and copies value of 1 into it*/</i>
}
</pre>
<hr/>
<h3>Member Functions of List</h3>

<h4>insert</h4>
<p>This method, as the name suggests, inserts an element at specific position, in a list. There are 3 variations of insert(), they are as follows :</p>
<ul class="content">
<li><code>insert(iterator, element)</code> : inserts <b>element</b> in the list before the position pointed by the <b>iterator</b>.</li>
<li><code>insert(iterator, count, element)</code> : inserts <b>element</b> in the list before the position pointed by the <b>iterator</b>, <b>count</b> number of times.</li>
<li><code>insert(iterator, start_iterator, end_iterator)</code>: insert the element pointed by <b>start_iterator</b> to the element pointed by <b>end_iterator</b> before the position pointed by <b>iterator</b></li>
</ul>
<pre>#include &lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

int main()
{
  <b>list</b>&lt;int&gt; l = {1,2,3,4,5};
  <b>list</b>&lt;int&gt;::iterator it = l.begin();           

  l.<b>insert</b> (it+1, 100);  <i>// insert 100 before 2 position</i>
  /* now the list is 1 100 2 3 4 5 */
  
  <b>list</b>&lt;int&gt; new_l = {10,20,30,40}; <i>// new list</i> 

  new_l.<b>insert</b> (new_l.<b>begin()</b> , l.<b>begin()</b>, l.<b>end()</b>);
  <i>/* insert elements from beginning of list l to end of list l 
    before 1 position in list new_l */</i>
  
  <i>/* now the list new_l is 1 100 2 3 4 5 10 20 30 40 */</i>

  l.<b>insert</b>(l.<b>begin()</b> , 5 , 10);  <i>// insert 10 before beginning 5 times </i>
  <i>/* now l is 10 10 10 10 10 1 100 2 3 4 5 */ </i>

  return 0;
}</pre>

<br>

<h4>push_back and push_front</h4>
<p><code>push_back(element)</code> method is used to push elements into a list from the back.</p>
<p class="center"><img src="images/push_back.png" alt="Push elements from back in Lists"/></p>
<p><code>push_front(element)</code> method is used to push elements into a list from the front.</p>
<p class="center"><img src="images/push_front.png" alt="Push elements from front in Lists"/></p>
<br>
<pre>#include &lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

int main()
{
   <b>list</b>&lt;int&gt; l{1,2,3,4,5};
   
   l.<b>push_back</b>(6);
   l.<b>push_back</b>(7);
   <i>/* now the list becomes 1,2,3,4,5,6,7 */</i>
   
   l.<b>push_front</b>(8);
   l.<b>push_front</b>(9);
   <i>/* now the list becomes 9,8,1,2,3,4,5,6,7 */</i>

}</pre>
<br>


<h4>pop_back and pop_front</h4>
<p><code>pop_front()</code> removes first element from the start of the list. While <code>pop_back()</code> removes first element from the end of the list.</p>
<pre>#include &lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

int main()
{
   <b>list</b>&lt;int&gt; l{1,2,3,4,5};
   
   l.<b>pop_back()</b>();
   <i>/* now the list becomes 1,2,3,4 */</i>
   
   l.<b>pop_front()</b>();
   <i>/* now the list becomes 2,3,4 */</i>
}
</pre>
<br>

<h4>empty</h4>
<p>This method returns true if the list is empty else returns false.</p>
<br>

<h4>size</h4>
<p>This method can be used to find the number of elements present in the list.</p>
<br>

<h4>front and back</h4>
<p><code>front()</code> is used to get the first element of the list from the start while <code>back()</code> is used to get the first element of the list from the back.</p>
<br>

<h4>swap</h4>
<p>Swaps two list, if there is exception thrown while swapping any element, <code>swap()</code> throws exception. Both lists which are to be swapped must be of the same type, i.e you can’t swap list of an integer with list of strings.
</p>
<br>

<h4>reverse</h4>
<p>This method can be used to reverse a list completely.</p>
<pre>#include &lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

int main()
{
   <b>list</b>&lt;int&gt; l{1,2,3,4,5};
   
   l.<b>reverse</b>();
   <i>/* now the list becomes 5,4,3,2,1 */</i>
}
</pre>
<br>

<h4>sort</h4>
<p><code>sort()</code> method sorts the given list. It does not create new sorted list but changes the position of elements within an existing list to sort it. This method has two variations :</p>
<ul class="content">
<li><code>sort()</code> : sorts the elements of the list in ascending order, the element of the list should by numeric for this function.</li>
<li><code>sort(compare_function)</code> : This type of sort() is used when we have to alter the method of sorting. Its very helpful for the elements that are not numeric. We can define how we want to sort the list elements in compare_funtion. For example, list of strings can be sorted by the length of the string, it can also be used for sorting in descending order.</li>
</ul>
<pre>#include &lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

bool compare_function( string& s1 , string& s2 )
{
return ( s1.length() > s2.length() );
}

int main()
{
  <b>list</b>&lt;int&gt; list1 = {2,4,5,6,1,3};
  <b>list</b>&lt;string&gt; list2 = {"h" , "hhh" , "hh"};

  list1.<b>sort</b>();
  <i>/* list1 is now 1 2 3 4 5 6 */</i>

  list2.<b>sort</b>(compare_function);
  <i>/* list2 is now h hh hhh */</i> 
}</pre>
<br>

<h4>splice</h4>
<p><code>splice()</code> method transfers the elements from one list to another. There are three versions of splice :</p>
<ul class="content">
<li><code>splice(iterator, list_name)</code> : Transfers complete list <b>list_name</b> at position pointed by the <b>iterator</b>.</li>
<li><code>splice(iterator, list_name, iterator_pos)</code> : Transfer elements pointed by <b>iterator_pos</b> from <b>list_name</b> at position pointed by <b>iterator</b>.</li>
<li><code>splice(iterator, list_name, itr_start, itr_end)</code> : Transfer range specified by <b>itr_start</b> and <b>itr_end</b> from <b>list_name</b> at position pointed by <b>iterator</b>.</li>
</ul>
<pre>#include &lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

int main ()
{
  <b>list</b>&lt;int&gt; list1 = {1,2,3,4};
  <b>list</b>&lt;int&gt; list2 = {5,6,7,8};
  <b>list</b>&lt;int&gt;::iterator it;

  it = list1.<b>begin</b>();
  ++it;   <i>//pointing to second position</i>           

  list1.<b>splice</b>(it, list2);
  <i>/* transfer all elements of list2 at position 2 in list1 */
  /* now list1 is 1 5 6 7 8 2 3 4 and list2 is empty */</i>

                                          
  list2.<b>splice</b>(list2.<b>begin</b>(), list1, it);
  <i>/* transfer element pointed by it in list1 to the beginning of list2 */
  /* list2 is now 5 and list1 is 1 6 7 8 2 3 4*/</i>

  return 0;
}</pre>
<br>


<h4>merge</h4>
<p>Merges two sorted  list. It is mandatory that both the list should be sorted first. <code>merge()</code> merges the two list such that each element is placed at its proper position in the resulting list. Syntax for merge is <code>list1.merge(list2)</code>.</p>
<p>The list that is passed as parameter does not get deleted and the list which calls the merge() becomes the merged list</p>
<pre>#include &lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

int main ()
{
  <b>list</b>&lt;int&gt; list1 = {1,3,5,7,9};
  <b>list</b>&lt;int&gt; list2 = {2,4,6,8,10};

  <i>/* both the lists are sorted. In case they are not , 
    first they should be sorted by sort function() */</i>

  list1.<b>merge</b>(list2);
  
  <i>/* list list1 is now 1,2,3,4,5,6,7,8,9,10  */</i>
  
  cout &lt;&lt; list1.<b>size</b>() &lt;&lt; endl;    <i>// prints 10 </i>
}</pre>
<br>
<hr>

<h4>Lexicographically comparing Lists</h4>
<p>Since lists are collection of elements, thus they do not have a standard value of their own. Thus in order to compare list or vectors we compare their elements in their lexicographical order.</p>
<p>For example, let list1 = { 1 , 2 , 3} and list2 = { 1 , 3 , 2 }, now if we want to check if the list1 is greater than list2 or not, we just check the element of each list in the order they appear in the lists. Since 1 in list1 is equal to 1 in list2, we proceed further, now 2 in list1 is smaller then 3 in list2, thus list2 is lexicographically greater than list1.</p>
<p>Operators <code>==</code> , <code>></code> , <code>< </code>, <code><=</code> , <code>>=</code> can be used to compare lists lexicographically.</p>

<hr/>
<div><ul class="pager">
<li class="previous">
<a href="stl-container-vector">&larr; Prev</a>
</li>
<li class="next">
<a href="stl-container-map">Next &rarr;</a>
</li>
</ul></div>

</div>
</div>

</div>

</div><!-- Container Ends here--> 

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-39722043-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

<div id="footer">
<div class="container">
<div id="footer-box">

<div id="footer-box-right">Check Out :  
<a href="../../library"><span class="label">Library</span></a>&nbsp;&nbsp;
<a href="../../online-courses"><span class="label">Video Courses</span></a>&nbsp;&nbsp;
<a href="../../studyroom"><span class="label">Studyroom</span></a>&nbsp;&nbsp;
<a href="../../flashcards"><span class="label">Flashcards</span></a>&nbsp;&nbsp;
</div>

<div id="footer-box-left">

<p>&copy; Studytonight 2014 &middot; <span><img src="../../css/resource/icon-heart-small.png"/>Handcrafted with Love</span></p>

<p><a href="../../about">About Us</a> &middot; <a href="../../suggest">Suggest</a> &middot; <a href="../../terms">Terms</a> &middot; <a href="../../contact">Contact Us</a> &middot; <a href="../../collaborate">Collaborate</a> &middot; <a href="../../authors.1">Authors</a> &middot; <a href="http://studytonight.tumblr.com/">Blog</a></p>


</div>

</div>  <!-- /footer-box -->
<div class="row">
<div class="span12 center">
<script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Responsive Footer Ad -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-6137246359299957"
     data-ad-slot="1965829825"
     data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>
</div>
</div> <!-- /container -->
</div>  <!-- /footer -->
</body>
</html>