<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Circular Linked List | Data Structure Tutorial | Studytonight</title>
<meta name="description" content="Learn implementation of Circular Linked List using C++ and Object Oriented Programming concepts in this tutorial."/>
<!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
<!--[if lt IE 9]>
<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
<!-- Le styles -->
<link href="../css/bootstrap.css" rel="stylesheet">
<link rel="icon" type="image/png" href="../css/resource/favicon.png">
</head>
<body>
<style>

.dropdown:hover ul{
    display:block;
}
.dropdown ul { 
    display: none;  
    position:absolute;
    background: rgba(0, 0, 0, 0.80); 
    width: 150px;   
    list-style-type:none;
    padding:10px;
} 
.dropdown ul li{
    padding:4px;
}
.dropdown ul li a{ 
    line-height:30px;
    cursor:pointer;
    text-decoration:none;
    color:white;
} 
.dropdown ul li a:hover{
   color:orange;
} 
.dropdown ul.second
{
    left: 300px;
}

</style>

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1&appId=183470395085546";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
<div class="navbar navbar-inverse navbar-fixed-top">
<div class="navbar-inner">
<div class="nav-container">
<a class="brand" href="../index.html" title="Take me Home :)"><img id="brand-icon" src="../css/resource/st-icon.png" alt="studytonight logo"/></a>

<!-- <font color="orange">Study</font>tonight<sup><span id="beta">&#946;eta</span></sup> --> 

<ul class="nav navbar-nav nav-left-responsive">
<li><a href="http://studytonight.com/online-courses/">VIDEO PLAYLISTS</a></li>
<li class="dropdown"><a href="http://studytonight.com/library/">TUTORIALS</a>

	<ul class="first">
            <li><a href="../android-app-using-mit-appinventor">ANDROID</a></li>
            <li><a href="../maven">APACHE MAVEN</a></li>
            <li><a href="../c">C LANGUAGE</a></li>
            <li><a href="../cpp.1">C++</a></li>
            <li><a href="../computer-networks">COMPUTER NETWORKS</a></li>
            <li><a href="../java">CORE JAVA</a></li>
      </ul>
      <ul class="second">
      	    <li><a href="../dbms">DBMS</a></li>
            <li><a href="../data-structures">DATA STRUCTURE</a></li>
            <li><a href="../jenkins">JENKINS</a></li>
            <li><a href="../jsp">JSP</a></li>
            <li><a href="../operating-system">OPERATING SYSTEM</a></li>
            <li><a href="../servlet">SERVLET</a></li>
       </ul>

</li>
<li><a href="http://studytonight.com/studyroom/">Q &amp; A FORUM</a></li>
<li><a href="http://studytonight.com/tests/">TESTS</a></li>
<li><a href="http://studytonight.com/code/">HTML COURSE<sup id='beta'>NEW</sup></a></li>
</ul>


<ul class="nav nav-fb-responsive">
<li class="nav-header">
<div class="fb-like" data-href="http://facebook.com/studytonight" data-send="false" data-layout="button_count" data-width="100" data-show-faces="false"></div>
</li>
</ul>


<ul class="nav pull-right-menuoption nav-right-responsive">
<li>
<form class="navbar-search" action="http://www.studytonight.com/search.php" method="GET"> 
<table>
<tr>
<td><input type="text" name="q" maxlength="255" value="" class="search-query span2" placeholder="Search" title="Search Studytonight for Lessons and Topics"/></td>
</tr>
</table>
</form>
</li>
<li><a href="../login">LogIn</a></li>
<li><a style="font-weight:bold;color:#f84906;" href="../register">SignUp</a></li>
<li><a href="../suggest">Suggest</a></li>
</ul>
</div>
</div>
</div>

<div style="float:right;margin-right:100px;">
<div class="bookmark-responsive">
<div class="bookmark-ribbon traditional font-calibri">
<a href="../collaborate" target="_blank"><div id="bookmark-text">
<div>WRITE</div><div>FOR US &amp;</div><div>GET PAID!</div>
</div></a>
</div></div></div>

<!--  Event Bannner Space

<div class="container">
<div class="row">
<div class="span12"><a href="http://studytonight.com/event"><img src="http://studytonight.com/css/codetonight-banner.png" alt="Codetonight for Java Programmers" title="Click to Register for Codetonight"/></a></div>
</div></div> --><div class="row">
<div class="head-bar-ds">
  <div class="container">
	<div id="subject-name">
	DATA STRUCTURES
	</div>
   </div>
<div id="subject-info"> <div class="container">

<div id="sm-button">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>

<!-- <a class="addthis_button_compact"></a> -->

</div>
<script type="text/javascript" src="http://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4fcb15e01d1a671c"></script>
</div>
<!-- AddThis Button END -->

</div>
<div>" Data Structures are widely used to organize data into unique structures to enhance programs performance. "</div>

</div> </div>

</div>
</div>
<!-- Common sub nav bar for all the lesson page, currently holding Google Adsense Code -->

<div class="center plain-text-ad-style" style="margin-bottom:10px;">
<div class="container">
<div class="row">
<div class="span12">
	<script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Sidebar Responsive Ad -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-6137246359299957"
     data-ad-slot="5741724623"
     data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>
</div>	
</div>
</div>

<div class="container">
<div class="row">
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script src="../js/jquery.tipsy.js" type="text/javascript"></script>
<script type="text/javascript">
$(function() {
$('.sidebar-social-button').tipsy({gravity: 'e'});
$('#slide-toggle-sidebar').on('click', function(){
        $('#sidebar-menu').css('width','100%');
	$('#sidebar-menu').slideToggle();
	return false;
});
});
</script>
<link href="../css/tipsy_title.css" rel="stylesheet">

<div class="span3">

<div class="sidebar-collpsed-responsive">
<a href="circular-linked-list#" id="slide-toggle-sidebar"><span class="pull-right"><img src="../css/resource/collapsed-menu.png" alt="Menu"/></span><span>SEE THE INDEX</span></a>
</div>

<div id="sidebar-menu">
<div class="sidebar-social-button" title="Share this Lesson with your friends">
<!-- AddThis Button BEGIN -->
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook_like" fb:like:layout="button_count"></a>
<a class="addthis_counter addthis_pill_style"></a>
</div>
<script type="text/javascript" src="http://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4fcb15e01d1a671c"></script>
<!-- AddThis Button END -->
</div>
<hr/>
<ul class="sidebar">
<li class="main">Basics and Sorting</li>
<li><a href="introduction-to-data-structures">Introduction to Data Structures</a></li>
<li><a href="time-complexity-of-algorithms">Time Complexity of Algorithms</a></li>
<li><a href="introduction-to-sorting">Introduction to Sorting</a></li>
<li><a href="bubble-sort">Bubble Sort</a></li>
<li><a href="insertion-sorting">Insertion Sort</a></li>
<li><a href="selection-sorting">Selection Sort</a></li>
<li><a href="quick-sort">Quick Sort</a></li>
<li><a href="merge-sort">Merge Sort</a></li>
<li><a href="heap-sort">Heap Sort</a></li>  
<li><a href="search-algorithms">Search Algorithms for Array</a></li>

<li class="main">Data Structures</li>
<li><a href="stack-data-structure">Stack Data Structure</a></li>
<li><a href="queue-data-structure">Queue Data Structure</a></li>  
<li><a href="queue-using-stack">Queue using Stack</a></li>
<li><a href="introduction-to-linked-list">Introduction to Linked List</a></li>
<li><a href="linear-linked-list">Linear Linked List</a></li>
<!--
<li><a href="#">Double ended Queue</a></li>
<li><a href="#">Stacks as Queue</a></li>

<li><a href="#">Stacks as Linked List</a></li>
<li><a href="#">Doubly Linked List</a></li>
<li><a href="#">Itroduction to Binary Search Tree</a></li>
<li><a href="#">Binary Search Tree</a></li>
<li><a href="#">Graphs</a></li>

<li class="main">Advanced Data Structures</li>
<li><a href="#">Complex data structures</a></li>
<li><a href="#">Custom Data Structures</a></li>
<li><a href="#">AVL Tree</a></li>
<li><a href="#">Huffman Encoding and Evaluation</a></li>
<li><a href="#">Balanced Trees</a></li>
-->
</ul>

<br/>
<p style="margin-left:2px;">
<script id="mNCC" language="javascript">  medianet_width='200';  medianet_height= '200';  medianet_crid='187662268';  </script>  <script id="mNSC" src="http://contextual.media.net/nmedianet.js?cid=8CUK82SPR" language="javascript"></script>
</p>
</div>
</div><div class="span9">
<div id="body-content">
<h2>Circular Linked List</h2>
<p>Circular Linked List is little more complicated linked data structure. In the circular linked list we can insert elements anywhere in the list whereas in the array we cannot insert element anywhere in the list because it is in the contiguous memory. In the circular linked list the previous element stores the address of the next element and the last element stores the address of the starting element. The elements points to each other in a circular way which forms a circular chain. The circular linked list has a dynamic size which means the memory can be allocated when it is required.</p>
<p class="center"><img src="images/linked-list-circular.png" alt="Circular Linked List"/></p>
<h4>Application of Circular Linked List</h4>
<ul class="content">
<li>The real life application where the circular linked list is used is our Personal Computers, where multiple applications are running. All the running applications are kept in a circular linked list and the OS gives a fixed time slot to all for running. The Operating System keeps on iterating over the linked list until all the applications are completed.
</li>
<li>Another example can be Multiplayer games. All the Players are kept in a Circular Linked List and the pointer keeps on moving forward as a player&apos;s chance ends.</li>
<li>Circular Linked List can also be used to create Circular Queue. In a Queue we have to keep two pointers, FRONT and REAR in memory all the time, where as in Circular Linked List, only one pointer is required.</li>
</ul>
<hr/>
<h3>Implementing Circular Linked List</h3>
<p>Implementing a circular linked list is very easy and almost similar to linear linked list implementation, with the only difference being that, in circular linked list the last <b>Node</b> will have it&apos;s <b>next</b> point to the <b>Head</b> of the List. In Linear linked list the last Node simply holds NULL in it&apos;s next pointer.</p>
<p>So this will be oue Node class, as we have already studied in the lesson, it will be used to form the List.</p>
<pre>
class <b>Node</b> {
  public:
  int data;
  <i>//pointer to the next node</i>
  node* next;
  
  <b>node</b>() {
    data = 0;
    next = NULL;
  }
  
  <b>node</b>(int x) {
    data = x;
    next = NULL;
  }
} 
</pre>
<hr>
<h4>Circular Linked List</h4>
<p>Circular Linked List class will be almost same as the Linked List class that we studied in the previous lesson, with a few difference in the implementation of class methods.</p>
<pre>
class <b>CircularLinkedList</b> {
  public:
  node *head;
  <i>//declaring the functions</i>
  
  <i>//function to add Node at front</i>
  int addAtFront(node *n);
  <i>//function to check whether Linked list is empty</i>
  int isEmpty();
  <i>//function to add Node at the End of list</i>
  int addAtEnd(node *n);
  <i>//function to search a value</i>
  node* search(int k);
  <i>//function to delete any Node</i>
  node* deleteNode(int x);
  
  <b>CircularLinkedList</b>() {
    head = NULL;
  }
}
</pre>
<hr/>
<h4>Insertion at the Beginning</h4>
<p>Steps to insert a Node at beginning :</p>
<ol class="content">
<li>The first Node is the Head for any Linked List.</li>
<li>When a new Linked List is instantiated, it just has the Head, which is Null.</li>
<li>Else, the Head holds the pointer to the fisrt Node of the List.</li>
<li>When we want to add any Node at the front, we must make the head point to it.</li>
<li>And the Next pointer of the newly added Node, must point to the previous Head, whether it be NULL(in case of new List) or the pointer to the first Node of the List.</li>
<li>The previous Head Node is now the second Node of Linked List, because the new Node is added at the front.</li>
</ol>
<pre>
int CircularLinkedList :: <b>addAtFront</b>(node *n) {
  int i = 0;
  <i>/* If the list is empty */</i>
  if(head == NULL) {
    n<b>-></b>next = head;
    <i>//making the new Node as Head</i>
    head = n;
    i++;
  }
  else {
    n->next = head;
    <i>//get the Last Node and make its next point to new Node</i>
    Node* last = <b>getLastNode</b>();
    last->next = n;
    <i>//also make the head point to the new first Node</i>
    head = n;
    i++;
  }
  <i>//returning the position where Node is added</i>
  return i;
}
</pre>
<hr/>
<h4>Insertion at the End</h4>
<p>Steps to insert a Node at the end :</p>
<ol class="content">
<li>If the Linked List is empty then we simply, add the new Node as the Head of the Linked List.</li>
<li>If the Linked List is not empty then we find the last node, and make it&apos; next to the new Node, and make the next of the Newly added Node point to the Head of the List.</li>
</ol>
<pre>
int CircularLinkedList :: <b>addAtEnd</b>(node *n) {
  <i>//If list is empty</i>
  if(head == NULL) {
    <i>//making the new Node as Head</i>
    head = n;
    <i>//making the next pointer of the new Node as Null</i>
    n<b>-></b>next = NULL;
  }
  else {
    <i>//getting the last node</i>
    node *last = <b>getLastNode</b>();
    last<b>-></b>next = n;
    <i>//making the next pointer of new node point to head</i>
    n<b>-></b>next = head;
  } 
}
</pre>
<hr/>
<h4>Searching for an Element in the List</h4>
<p>In searhing we do not have to do much, we just need to traverse like we did while getting the last node, in this case we will also compare the <b>data</b> of the Node. If we get the Node with the same data, we will return it, otherwise we will make our pointer point the next Node, and so on.</p>
<pre>
node* CircularLinkedList :: <b>search</b>(int x) {
  node *ptr = head;
  while(ptr != NULL && ptr<b>-></b>data != x) {
    <i>//until we reach the end or we find a Node with data x, we keep moving</i>
    ptr = ptr<b>-></b>next;
  }
  return ptr;
}
</pre>
<hr/>
<h4>Deleting a Node from the List</h4>
<p>Deleting a node can be done in many ways, like we first search the Node with <b>data</b> which we want to delete and then we delete it. In our approach, we will define a method which will take the <b>data</b> to be deleted as argument, will use the search method to locate it and will then remove the Node from the List.</p>
<p>To remove any Node from the list, we need to do the following :</p>
<ul class="content">
<li>If the Node to be deleted is the first node, then simply set the Next pointer of the Head to point to the next element from the Node to be deleted. And update the next pointer of the Last Node as well.</li>
<li>If the Node is in the middle somewhere, then find the Node before it, and make the Node before it point to the Node next to it.</li>
<li>If the Node is at the end, then remove it and make the new last node point to the head.</li>
</ul>
<pre>
node* CircularLinkedList :: <b>deleteNode</b>(int x) {
  <i>//searching the Node with data x</i>
  node *n = <b>search</b>(x);
  node *ptr = head;
  <b>if</b>(ptr == NULL) {
    cout &lt;&lt; "List is empty";
    return NULL;
  }
  <b>else if</b>(ptr == n) {
    ptr<b>-></b>next = n<b>-></b>next;
    return n;
  }
  <b>else</b> {
    while(ptr<b>-></b>next != n) {
      ptr = ptr<b>-></b>next;
    }
    ptr<b>-></b>next = n<b>-></b>next;
    return n;
  }
}
</pre>
<hr>

<div><ul class="pager">
<li class="previous">
<a href="linear-linked-list">&larr; Prev</a>
</li>
<!--
<li class="next">
<a href="">Next &rarr;</a>
</li>
-->
</ul></div>
</div></div>
</div><!-- body span9 ends-->
</div><!-- Container Ends here--> 
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-39722043-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

<div id="footer">
<div class="container">
<div id="footer-box">

<div id="footer-box-right">Check Out :  
<a href="../library"><span class="label">Library</span></a>&nbsp;&nbsp;
<a href="../online-courses"><span class="label">Video Courses</span></a>&nbsp;&nbsp;
<a href="../studyroom"><span class="label">Studyroom</span></a>&nbsp;&nbsp;
<a href="../flashcards"><span class="label">Flashcards</span></a>&nbsp;&nbsp;
</div>

<div id="footer-box-left">

<p>&copy; Studytonight 2014 &middot; <span><img src="../css/resource/icon-heart-small.png"/>Handcrafted with Love</span></p>

<p><a href="../about">About Us</a> &middot; <a href="../suggest">Suggest</a> &middot; <a href="../terms">Terms</a> &middot; <a href="../contact">Contact Us</a> &middot; <a href="../collaborate">Collaborate</a> &middot; <a href="../authors.1">Authors</a> &middot; <a href="http://studytonight.tumblr.com/">Blog</a></p>


</div>

</div>  <!-- /footer-box -->
<div class="row">
<div class="span12 center">
<script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Responsive Footer Ad -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-6137246359299957"
     data-ad-slot="1965829825"
     data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>
</div>
</div> <!-- /container -->
</div>  <!-- /footer --></body>
</html>